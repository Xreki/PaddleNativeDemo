#include <paddle/capi.h>
#include <time.h>
#include "../common/common.h"

int main() {
  // Initalize Paddle
  char* argv[] = {"--use_gpu=False"};
  CHECK(paddle_init(1, (char**)argv));

  printf("Step 1: Reading config binary file. It is generated by "
         "`convert_protobin.sh`\n");
  long config_size;
  void* buf = read_config("vgg_attention_eng/config.bin", &config_size);

  printf("Step 2: Create a gradient machine for inference.\n");
  paddle_gradient_machine machine;
  CHECK(paddle_gradient_machine_create_for_inference(&machine,
                                                     buf,
                                                     (int)config_size));
  CHECK(paddle_gradient_machine_randomize_param(machine));

  printf("        Loading parameter. Uncomment the following line and change "
         "the directory.\n");
  // CHECK(paddle_gradient_machine_load_parameter_from_disk(machine,
  //                                                "vgg_attention_eng/model"));
  long params_size = 0;
  char* params = (char *) read_config("vgg_attention_eng.weights", &params_size);
  CHECK(paddle_gradient_machine_load_parameter_from_buffer(machine,
                                                           params,
                                                           params_size));

  printf("Step 3: Prepare input Arguments.\n");
  paddle_arguments in_args = paddle_arguments_create_none();

  printf("        There is only one input of this network.\n");
  CHECK(paddle_arguments_resize(in_args, 1));

  printf("        Create input matrix.\n");
  paddle_matrix mat = paddle_matrix_create(/* sample_num */ 1,
                                           /* size */ 48 * 48,
                                           /* useGPU */ false);
  srand(time(0));
  paddle_real* array;

  printf("        Get First row.\n");
  CHECK(paddle_matrix_get_row(mat, 0, &array));

  printf("        Initialize the pixels, and substract the mean value.\n");
  for (int i = 0; i < 48 * 48; ++i) {
    array[i] = rand() / ((float) 255) - 127.0;
  }

  printf("        Set the value.\n");
  CHECK(paddle_arguments_set_value(in_args, 0, mat));

  printf("Step 4: Do inference.\n");
  paddle_arguments out_args = paddle_arguments_create_none();
  CHECK(paddle_gradient_machine_forward(machine,
                                        in_args,
                                        out_args,
                                        /* isTrain */ false));

  printf("Step 5: Get the result.\n");
  paddle_ivector ids = paddle_ivector_create_none();
  CHECK(paddle_arguments_ids(out_args, 0, ids));

  uint64_t size = 0;
  CHECK(paddle_ivector_get_size(ids, &size));

  int* labels = NULL;
  CHECK(paddle_ivector_get(ids, &labels));

  printf("Labels: %lld\n", size);
  for (int i = 0; i < size; i++) {
    printf("%d ", labels[i]);
    if (labels[i] == -1) {
      printf("\n");
    }
  }
  printf("\n");

  printf("Step 6: Release the resources.\n");
  CHECK(paddle_gradient_machine_destroy(machine));
  CHECK(paddle_arguments_destroy(in_args));
  CHECK(paddle_matrix_destroy(mat));
  CHECK(paddle_arguments_destroy(out_args));
  CHECK(paddle_ivector_destroy(ids));

  return 0;
}
