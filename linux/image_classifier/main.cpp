#include <paddle/capi.h>
#include <time.h>
#include "utils/common.h"
#include "utils/timer.h"

#ifdef USE_OPENCV
#include "utils/opencv_image_reader.h"
#else
#include "utils/binary_image_reader.h"
#endif

int main() {
  // Initalize Paddle
  char* argv[] = {"--use_gpu=False"};
  CHECK(paddle_init(1, (char**)argv));

  // const char* config_filename = "resnet_50/resnet_50.bin";
  // const char* params_dirname = "resnet_50/resnet_50";

  const char* config_filename = "mobilenet_224x224/mobilenet.bin";
  const char* params_dirname = "mobilenet_224x224/model";

  // Step 1: Reading config binary file. It is generated by `convert_protobin.sh`
  long size;
  void* buf = read_config(config_filename, &size);

  // Step 2: 
  //    Create a gradient machine for inference.
  paddle_gradient_machine machine;
  CHECK(paddle_gradient_machine_create_for_inference(&machine, buf, (int)size));
  CHECK(paddle_gradient_machine_randomize_param(machine));

  //    Loading parameter. Uncomment the following line and change the directory.
  CHECK(paddle_gradient_machine_load_parameter_from_disk(machine,
                                                         params_dirname));
  // char* params = (char *) read_config("resnet_50.weights", &size);
  // CHECK(paddle_gradient_machine_load_parameter_from_buffer(machine, params, size));

  // Step 3: Prepare input Arguments
  paddle_arguments in_args = paddle_arguments_create_none();

  // There is only one input of this network.
  CHECK(paddle_arguments_resize(in_args, 1));

  // Create input matrix.
  // Set the value
  size_t IMAGE_HEIGHT = 224;
  size_t IMAGE_WIDTH = 224;
  size_t IMAGE_CHANNEL = 3;
  paddle_matrix mat = paddle_matrix_create(/* sample_num */ 1,
                                           /* size */ IMAGE_CHANNEL * IMAGE_HEIGHT * IMAGE_WIDTH,
                                           /* useGPU */ false);
  CHECK(paddle_arguments_set_value(in_args, 0, mat));

  paddle_real* array;

  // Get First row.
  CHECK(paddle_matrix_get_row(mat, 0, &array));

#ifdef USE_OPENCV
  std::string image_path = "images/chicken_2_224x224.jpg";
  std::vector<float> means({103.939, 116.779, 123.680});
  utils::OpencvImageReader<float> reader(means);
#else
  std::string image_path = "images/data.bin";
  utils::BinaryImageReader<float> reader;
#endif

  reader(image_path, array, IMAGE_HEIGHT, IMAGE_WIDTH, IMAGE_CHANNEL);

  // Step 4: Do inference.
  paddle_arguments out_args = paddle_arguments_create_none();
  {
    REGISTER_TIMER("inference");
    CHECK(paddle_gradient_machine_forward(machine,
                                          in_args,
                                          out_args,
                                          /* isTrain */ false));
  }

  PRINT_TIMER;

  // Step 5: Get the result.
  paddle_matrix probs = paddle_matrix_create_none();
  CHECK(paddle_arguments_get_value(out_args, 0, probs));

  uint64_t height = 0;
  uint64_t width = 0;
  CHECK(paddle_matrix_get_shape(probs, &height, &width));
  CHECK(paddle_matrix_get_row(probs, 0, &array));

  printf("Prob: %lld x %lld\n", height, width);
  for (uint64_t i = 0; i < height; i++) {
    int maxid = 0;
    for (uint64_t j = 0; j < width; j++) {
      if (array[i * width + j] > array[i * width + maxid]) {
        maxid = j;
      }
    }
    printf("max probs of %d-th: %d - %f\n", i, maxid, array[i * width + maxid]);
    // printf("\n");
  }
  printf("\n");

  // Step 6: Release the resources.
  CHECK(paddle_gradient_machine_destroy(machine));
  CHECK(paddle_arguments_destroy(in_args));
  CHECK(paddle_matrix_destroy(mat));
  CHECK(paddle_arguments_destroy(out_args));
  CHECK(paddle_matrix_destroy(probs));

  return 0;
}
