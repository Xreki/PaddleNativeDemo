#include <paddle/capi.h>
#include <time.h>
#include "../common/common.h"

int main() {
  // Initalize Paddle
  char* argv[] = {"--use_gpu=False"};
  CHECK(paddle_init(1, (char**)argv));

  // Step 1: Reading config binary file. It is generated by `convert_protobin.sh`
  long size;
  void* buf = read_config("resnet_50/resnet_50.bin", &size);

  // Step 2: 
  //    Create a gradient machine for inference.
  paddle_gradient_machine machine;
  CHECK(paddle_gradient_machine_create_for_inference(&machine, buf, (int)size));
  CHECK(paddle_gradient_machine_randomize_param(machine));

  //    Loading parameter. Uncomment the following line and change the directory.
  CHECK(paddle_gradient_machine_load_parameter_from_disk(machine,
                                                 "resnet_50/model"));

  // Step 3: Prepare input Arguments
  paddle_arguments in_args = paddle_arguments_create_none();

  // There is only one input of this network.
  CHECK(paddle_arguments_resize(in_args, 1));

  // Create input matrix.
  paddle_matrix mat = paddle_matrix_create(/* sample_num */ 1,
                                           /* size */ 224 * 224 * 3,
                                           /* useGPU */ false);
  srand(time(0));
  paddle_real* array;

  // Get First row.
  CHECK(paddle_matrix_get_row(mat, 0, &array));

  // Initialize the pixels, and substract the mean value.
  for (int i = 0; i < 224 * 224; ++i) {
    array[3 * i + 0] = rand() / ((float) 255) - 103.939;
    array[3 * i + 1] = rand() / ((float) 255) - 116.779;
    array[3 * i + 2] = rand() / ((float) 255) - 123.680;
  }

  // Set the value
  CHECK(paddle_arguments_set_value(in_args, 0, mat));

  // Step 4: Do inference.
  paddle_arguments out_args = paddle_arguments_create_none();
  CHECK(paddle_gradient_machine_forward(machine,
                                        in_args,
                                        out_args,
                                        /* isTrain */ false));

  // Step 5: Get the result.
  paddle_matrix prob = paddle_matrix_create_none();
  CHECK(paddle_arguments_value(out_args, 0, prob));

  uint64_t height = 0;
  uint64_t width = 0;
  CHECK(paddle_matrix_get_shape(prob, &height, &width));

  CHECK(paddle_matrix_get_row(prob, 0, &array));

  printf("Prob: %lld x %lld\n", height, width);
  for (int i = 0; i < 1000; i+=100) {
    for (int j = i; j < i + 100; j++) {
      printf("%.2f ", array[j]);
    }
    printf("\n");
  }
  printf("\n");

  // Step 6: Release the resources.
  CHECK(paddle_gradient_machine_destroy(machine));
  CHECK(paddle_arguments_destroy(in_args));
  CHECK(paddle_matrix_destroy(mat));
  CHECK(paddle_arguments_destroy(out_args));
  CHECK(paddle_matrix_destroy(prob));

  return 0;
}
